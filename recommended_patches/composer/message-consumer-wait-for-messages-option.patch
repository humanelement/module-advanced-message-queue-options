--- a/CallbackInvoker.php
+++ b/CallbackInvoker.php
@@ -8,6 +8,7 @@ namespace Magento\Framework\MessageQueue;

 use Magento\Framework\MessageQueue\PoisonPill\PoisonPillCompareInterface;
 use Magento\Framework\MessageQueue\PoisonPill\PoisonPillReadInterface;
+use Magento\Framework\App\DeploymentConfig;

 /**
  * Class CallbackInvoker to invoke callbacks for consumer classes
@@ -29,16 +30,24 @@ class CallbackInvoker implements CallbackInvokerInterface
      */
     private $poisonPillCompare;

+    /**
+     * @var DeploymentConfig
+     */
+    private $deploymentConfig;
+
     /**
      * @param PoisonPillReadInterface $poisonPillRead
      * @param PoisonPillCompareInterface $poisonPillCompare
+     * @param DeploymentConfig $deploymentConfig
      */
     public function __construct(
         PoisonPillReadInterface $poisonPillRead,
-        PoisonPillCompareInterface $poisonPillCompare
+        PoisonPillCompareInterface $poisonPillCompare,
+        DeploymentConfig $deploymentConfig
     ) {
         $this->poisonPillRead = $poisonPillRead;
         $this->poisonPillCompare = $poisonPillCompare;
+        $this->deploymentConfig = $deploymentConfig;
     }

     /**
@@ -56,13 +65,29 @@ class CallbackInvoker implements CallbackInvokerInterface
             do {
                 $message = $queue->dequeue();
                 // phpcs:ignore Magento2.Functions.DiscouragedFunction
-            } while ($message === null && (sleep(1) === 0));
+            } while ($message === null && $this->isWaitingNextMessage() && (sleep(1) === 0));
+
+            if ($message === null) {
+                break;
+            }
+
             if (false === $this->poisonPillCompare->isLatestVersion($this->poisonPillVersion)) {
                 $queue->reject($message);
                 // phpcs:ignore Magento2.Security.LanguageConstruct.ExitUsage
                 exit(0);
             }
+
             $callback($message);
         }
     }
+
+    /**
+     * Checks if consumers should wait for message from the queue
+     *
+     * @return bool
+     */
+    private function isWaitingNextMessage(): bool
+    {
+        return $this->deploymentConfig->get('queue/consumers_wait_for_messages', 1) === 1;
+    }
 }
